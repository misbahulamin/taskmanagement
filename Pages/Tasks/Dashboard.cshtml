@page
@model TaskManagement.Pages.Tasks.DashboardModel
@{
    ViewData["Title"] = "Task Dashboard";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1><i class="bi bi-graph-up"></i> Task Analytics Dashboard</h1>
                <a asp-page="./Index" class="btn btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Back to Tasks
                </a>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Total Tasks</h5>
                    <p class="display-4">@Model.TotalTasks</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Completed Tasks</h5>
                    <p class="display-4">@Model.CompletedTasks</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Active Tasks</h5>
                    <p class="display-4">@Model.ActiveTasks</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-danger text-white shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">High Priority Tasks</h5>
                    <p class="display-4">@Model.HighPriorityTasks</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">Tasks by Priority</h5>
                </div>
                <div class="card-body">
                    <div class="priority-chart">
                        @foreach (var priority in Model.TasksByPriority)
                        {
                            var priorityClass = priority.Key.ToString().ToLower();
                            var percentage = Model.TotalTasks > 0 ? (priority.Value * 100 / Model.TotalTasks) : 0;
                            
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <span>@priority.Key</span>
                                    <span>@priority.Value (@percentage%)</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar priority-@priorityClass" role="progressbar" 
                                         style="width: @percentage%" aria-valuenow="@percentage" 
                                         aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">Tasks by Category</h5>
                </div>
                <div class="card-body">
                    @if (!Model.TasksByCategory.Any())
                    {
                        <p class="text-muted">No categories found for your tasks. Try adding categories to your tasks.</p>
                    }
                    else
                    {
                        <div class="category-chart">
                            @foreach (var category in Model.TasksByCategory)
                            {
                                var percentage = Model.TotalTasks > 0 ? (category.Value * 100 / Model.TotalTasks) : 0;
                                var colorHue = (Model.TasksByCategory.ToList().IndexOf(category) * 30) % 360;
                                
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>@(string.IsNullOrEmpty(category.Key) ? "Uncategorized" : category.Key)</span>
                                        <span>@category.Value (@percentage%)</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" 
                                            style="width: @percentage%; background-color: hsl(@colorHue, 60%, 50%)" 
                                            aria-valuenow="@percentage" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">Recently Completed Tasks</h5>
                </div>
                <div class="card-body">
                    @if (!Model.RecentlyCompletedTasks.Any())
                    {
                        <p class="text-muted">No completed tasks found.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Priority</th>
                                        <th>Completed At</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in Model.RecentlyCompletedTasks)
                                    {
                                        <tr>
                                            <td>@task.Title</td>
                                            <td>@(string.IsNullOrEmpty(task.Category) ? "-" : task.Category)</td>
                                            <td><span class="badge bg-@task.Priority.ToString().ToLower()">@task.Priority</span></td>
                                            <td>@(task.CompletedAt?.ToString("MMM d, yyyy") ?? "-")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">Tasks Due Soon</h5>
                </div>
                <div class="card-body">
                    @if (!Model.TasksDueSoon.Any())
                    {
                        <p class="text-muted">No upcoming tasks with due dates.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Title</th>
                                        <th>Category</th>
                                        <th>Priority</th>
                                        <th>Due Date</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in Model.TasksDueSoon)
                                    {
                                        var daysLeft = (task.DueDate!.Value - DateTime.Now).Days;
                                        var dueSoonClass = daysLeft <= 1 ? "text-danger" : (daysLeft <= 3 ? "text-warning" : "");
                                        
                                        <tr>
                                            <td>@task.Title</td>
                                            <td>@(string.IsNullOrEmpty(task.Category) ? "-" : task.Category)</td>
                                            <td><span class="badge bg-@task.Priority.ToString().ToLower()">@task.Priority</span></td>
                                            <td class="@dueSoonClass">@task.DueDate?.ToString("MMM d, yyyy")</td>
                                            <td>@(task.IsCompleted ? "Completed" : "Active")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Add animation to cards
        document.addEventListener('DOMContentLoaded', function() {
            const cards = document.querySelectorAll('.card');
            
            cards.forEach((card, index) => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    card.style.transition = 'opacity 0.4s ease, transform 0.4s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 + (index * 50));
            });
        });
    </script>
} 